% Domain Parameters:
% p = Field that curve is defined over
% a,b = Values define the curve
% g = Generator point
% n = prime order of g (smallest num s.t. n*g = elliptic identity)
% h = cofactor (number of points over curve n)

% Steps for public/private key pair
% 1. Each party select random value d s.t. 1 <= d <= n-1
% 2. Public: d*g = P = (xG, yG)
% 3. Send P to eachother 
% 4. Calculate 3rd point R = d*P
% *Note --> R = d * (other d) * G = (xR, yR) so both parties have same
%           coordinates. R is kept private. 
% 5. Use R as the key 
%% READING IMAGE
img =(imread('8-bit-256-x-256-Grayscale-Lena-Image_Q320.jpg'));
figure,imhist(img);
[lt bt]=size(img);
input=img;
figure,imshow(img);
% y^2=x^3+ax+b mod p
a = 1;
b = 3;
p = 31;
% Select G point
if (4*(a^3))+ (27*(b^2)) ~= 0
points = getPoints(a, b, p);
%disp(points);
xG = points(1,1);
yG = points(1,2);
disp(['G: (' num2str(xG) ', ' num2str(yG) ')']);
[n, ordPoints] = computeOrder(xG, yG, a, p);
% Choose d s.t. 1 <= d <= n-1
% Compute d*g (ex if d = 5, find 5g)
d = 13;
xP = ordPoints(d,1);
yP = ordPoints(d,2);
disp(['Pa: (' num2str(xP) ', ' num2str(yP) ')']);
e = 17;
x1 = ordPoints(e,1);
y1 = ordPoints(e,2);

otherD=mod(d*e,n)
disp(['Pb: (' num2str(x1) ', ' num2str(y1) ')']);
xQ = ordPoints(otherD,1);
yQ = ordPoints(otherD,2);
xPQ = xQ;
yPQ = yQ;
% Key has been generated 
disp(['KI: (' num2str(xPQ) ', ' num2str(yPQ) ')']);
otherD = xPQ;
xQ = ordPoints(otherD,1);
yQ = ordPoints(otherD,2);
K1=[xQ,yQ];
disp(['K1: (' num2str(xQ) ', ' num2str(yQ) ')']);
otherD = yPQ;
xQ = ordPoints(otherD,1);
yQ = ordPoints(otherD,2);
disp(['K2: (' num2str(xQ) ', ' num2str(yQ) ')']);
K2=[xQ,yQ];
I=[1 0;0 1];
K11=[K1;K2];
K12=I-K11;
K21=I+K11;
K22=-1*K11;
Km=mod([K11,K12;K21,K22],256);
disp(Km);
%self invertible key matrix generated by both users
%Similarly reciever also generated the Km Key matrix
%nb=17;
%Pb=17(1,6)=(24,5)
%Ki=nb*Pa=17(3,23)=(20,5)=(x,y) Initial Key
%Compute K1,K2 as above
%figure,imshow(img);
%% ENCRYPTION
i=1;
while(i<=lt)
    j=1;
    while(j<=bt)
        p1=double([input(i,j);input(i,j+1);input(i,j+2);input(i,j+3)]);
        t=mod(Km*p1,256);
        input(i,j)=t(1);
        input(i,j+1)=t(2);
        input(i,j+2)=t(3);
        input(i,j+3)=t(4);
        j=j+4;
    end
    i=i+1;
end
%Open this to display the encryption results
encryptedimg=input;
figure,imshow(input);
figure,imhist(input);
%B=input;
J1=entropy(input)
%B=double(input)
%% DECRYPTION
i=1;
while(i<=lt)
    j=1;
    while(j<=bt)
        p1=double([input(i,j);input(i,j+1);input(i,j+2);input(i,j+3)]);
        t=mod(Km*p1,256);
        input(i,j)=t(1);
        input(i,j+1)=t(2);
        input(i,j+2)=t(3);
        input(i,j+3)=t(4);
        j=j+4;
    end
    i=i+1;
end
%Open this to display the decryption results
decryptedimg=input;
figure,imshow(input);
figure,imhist(input);
end